#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from battle_interfaces.msg import TargetArray, Target
from battle_interfaces.srv import Pointing

class CommanderNode(Node):
    def __init__(self):
        super().__init__('commander_node')

        # —Å–ø–∏—Å–æ–∫ –±–æ–π–æ–≤–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º (namespace ‚Üî —Å–µ—Ä–≤—ñ—Å/—Ç–æ–ø—ñ–∫)
        self.fire_platforms = ['fp1', 'fp3']

        # —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—ñ—î–Ω—Ç–∏ Pointing —ñ –ø–∞–±–ª—ñ—à–µ—Ä–∏ fire_command
        self.pointing_clients = {}
        self.fire_publishers = {}
        for ns in self.fire_platforms:
            self.pointing_clients[ns] = self.create_client(
                Pointing, f'/{ns}/Pointing')
            self.fire_publishers[ns] = self.create_publisher(
                Target, f'/{ns}/fire_command', 10)

        # –ø—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–∞—Å–∏–≤ —Ü—ñ–ª–µ–π
        self.subscription = self.create_subscription(
            TargetArray,
            '/target_array',
            self.target_array_callback,
            10
        )

        self.get_logger().info('Command center node started')

    def target_array_callback(self, array_msg: TargetArray):
        # —è–∫—â–æ –Ω–µ–º–∞—î —Ü—ñ–ª–µ–π ‚Äî –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ
        if not array_msg.targets:
            return

        # –±–µ—Ä–µ–º–æ –ø–µ—Ä—à—É —Ü—ñ–ª—å –∑ –º–∞—Å–∏–≤—É
        target = array_msg.targets[0]
        self.get_logger().info(
            f'üéØ Got {len(array_msg.targets)} targets; ID={target.id}'
        )

        # –ø—Ä–æ–±—É—î–º–æ –∫–æ–∂–Ω—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
        for ns in self.fire_platforms:
            client = self.pointing_clients[ns]
            if not client.wait_for_service(timeout_sec=0.1):
                continue  # —Å–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π

            # —Ñ–æ—Ä–º—É—î–º–æ –∑–∞–ø–∏—Ç —ñ —á–µ–∫–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            req = Pointing.Request()
            req.target = target
            future = client.call_async(req)
            rclpy.spin_until_future_complete(self, future, timeout_sec=0.3)

            # —è–∫—â–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ø—Ä–∏–π–Ω—è–ª–∞ ‚Äî –ø—É–±–ª—ñ–∫—É—î–º–æ –∫–æ–º–∞–Ω–¥—É —Ç–∞ –≤–∏—Ö–æ–¥–∏–º–æ
            result = future.result() if future.done() else None
            if result and result.accepted:
                self.get_logger().info(
                    f'üöÄ Target {target.id} assigned to {ns}')
                self.fire_publishers[ns].publish(target)
                return

        # —è–∫—â–æ –∂–æ–¥–Ω–∞ –Ω–µ –ø—Ä–∏–π–Ω—è–ª–∞    
        self.get_logger().warn(
            f'‚ùå No platform accepted target {target.id}'
        )

def main(args=None):
    rclpy.init(args=args)
    node = CommanderNode()
    rclpy.spin(node)
    rclpy.shutdown()

if __name__ == '__main__':
    main()
