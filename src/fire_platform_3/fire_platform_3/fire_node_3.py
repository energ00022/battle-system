#!/usr/bin/env python3
import rclpy
from rclpy.node import Node

from battle_interfaces.msg import Target
from battle_interfaces.srv import Pointing


class FireNode3(Node):
    """–ë–æ–π–æ–≤–∏–π –º–æ–¥—É–ª—å fp3: –ø—Ä–∏–π–º–∞—î Pointing‚Äë—Å–µ—Ä–≤—ñ—Å —ñ fire_command."""

    def __init__(self):
        super().__init__('fire_node_3')

        # ---------------------------------------------------------------
        # 1. –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø—ñ–∫ fire_command –¥–ª—è fp3
        # ---------------------------------------------------------------
        self.subscription = self.create_subscription(
            Target,
            '/fp3/fire_command',           # ‚Üê –≤–ª–∞—Å–Ω–∏–π —Ç–æ–ø—ñ–∫
            self.fire_callback,
            10
        )

        # ---------------------------------------------------------------
        # 2. –°–µ—Ä–≤–µ—Ä —Å–µ—Ä–≤—ñ—Å—É Pointing
        # ---------------------------------------------------------------
        self.pointing_srv = self.create_service(
            Pointing,
            '/fp3/Pointing',               # ‚Üê –≤–ª–∞—Å–Ω–∏–π —Å–µ—Ä–≤—ñ—Å
            self.pointing_callback
        )

        # –°—Ç–∞—Ç—É—Å –∑–∞–π–Ω—è—Ç–æ—Å—Ç—ñ
        self.busy = False
        self.reset_timer = None            # –¥–ª—è —Ç–∞–π–º–µ—Ä–∞ one‚Äëshot

        self.get_logger().info('üî• Fire platform fp3 ready')

    # ------------------------------------------------------------------
    #   Pointing service callback
    # ------------------------------------------------------------------
    def pointing_callback(self, request, response):
        """–ü—Ä–∏–π–º–∞—î —á–∏ –≤—ñ–¥—Ö–∏–ª—è—î –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω—É —Ü—ñ–ª—å."""
        if self.busy:
            response.accepted = False
            response.remark = 'busy'
        else:
            self.busy = True
            response.accepted = True
            response.remark = 'accepted'
            self.get_logger().info(
                f'‚úÖ [FP3] Accepted target {request.target.id}')
        return response

    # ------------------------------------------------------------------
    #   fire_command topic callback
    # ------------------------------------------------------------------
    def fire_callback(self, msg: Target):
        """–Ü–º—ñ—Ç—É—î–º–æ –ø–æ—Å—Ç—Ä—ñ–ª —ñ —á–µ—Ä–µ–∑ 3¬†—Å –∑–≤—ñ–ª—å–Ω—è—î–º–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É."""
        self.get_logger().info(
            f'üí• [FP3] Firing at target {msg.id} '
            f'({msg.x:.1f}, {msg.y:.1f}, {msg.z:.1f})'
        )

        # –°—Ç–≤–æ—Ä—é—î–º–æ/–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ —Ç–∞–π–º–µ—Ä one‚Äëshot 3¬†—Å
        if self.reset_timer is not None:
            self.reset_timer.cancel()

        self.reset_timer = self.create_timer(
            3.0, self._reset_busy_once)

    # ------------------------------------------------------------------
    #   –¥–æ–ø–æ–º—ñ–∂–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Ç–∞–π–º–µ—Ä–∞
    # ------------------------------------------------------------------
    def _reset_busy_once(self):
        self.busy = False
        if self.reset_timer is not None:
            self.reset_timer.cancel()
            self.reset_timer = None
        self.get_logger().info('üü¢ [FP3] Ready for a new target')


# ----------------------------------------------------------------------
def main(args=None):
    rclpy.init(args=args)
    node = FireNode3()
    rclpy.spin(node)
    rclpy.shutdown()


if __name__ == '__main__':
    main()
