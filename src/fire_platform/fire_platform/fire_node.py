#!/usr/bin/env python3
import rclpy
from rclpy.node import Node

from battle_interfaces.msg import Target
from battle_interfaces.srv import Pointing


class FireNode(Node):
    def __init__(self):
        super().__init__('fire_node')

        # –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É —Å—Ç—Ä—ñ–ª—è—Ç–∏
        self.subscription = self.create_subscription(
            Target,
            '/fp1/fire_command',          # —Ç–æ–ø—ñ–∫ –¥–ª—è —Ü—ñ—î—ó –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏
            self.fire_callback,
            10
        )

        # –°–µ—Ä–≤–µ—Ä —Å–µ—Ä–≤—ñ—Å—É Pointing
        self.srv = self.create_service(
            Pointing,
            '/fp1/Pointing',
            self.pointing_cb
        )

        self.busy = False          # –ø—Ä–∞–ø–æ—Ä–µ—Ü—å ¬´–∑–∞–π–Ω—è—Ç–∏–π¬ª
        self.reset_timer = None    # –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–∞–π–º–µ—Ä one‚Äëshot
        self.get_logger().info('üî• Fire platform fp1 ready')

    # --------- Pointing service --------------------------------------------
    def pointing_cb(self, request, response):
        if self.busy:
            response.accepted = False
            response.remark = 'busy'
        else:
            self.busy = True
            response.accepted = True
            response.remark = 'accepted'
            self.get_logger().info(
                f'‚úÖ Accepted target {request.target.id}')
        return response

    # --------- Fire command topic ------------------------------------------
    def fire_callback(self, msg: Target):
        self.get_logger().info(
            f'üí• fp1 firing at target {msg.id} '
            f'({msg.x:.1f}, {msg.y:.1f}, {msg.z:.1f})'
        )

        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–π–º–µ—Ä‚Äëone‚Äëshot, —è–∫–∏–π —á–µ—Ä–µ–∑ 3¬†—Å —Å–∫–∏–Ω–µ busy
        if self.reset_timer is not None:
            self.reset_timer.cancel()       # –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
        self.reset_timer = self.create_timer(
            3.0,                            # —Å–µ–∫
            self._reset_busy_once           # callback
        )

    # --------- –î–æ–ø–æ–º—ñ–∂–Ω–∏–π callback -----------------------------------------
    def _reset_busy_once(self):
        self.busy = False
        if self.reset_timer is not None:
            self.reset_timer.cancel()       # –∑—É–ø–∏–Ω—è—î–º–æ —Ç–∞–π–º–µ—Ä, —â–æ–± –≤—ñ–Ω –Ω–µ –ø–æ–≤—Ç–æ—Ä—é–≤–∞–≤—Å—è
            self.reset_timer = None
        self.get_logger().info('üü¢ fp1 is ready for a new target')

# ---------------------------------------------------------------------------
def main(args=None):
    rclpy.init(args=args)
    node = FireNode()
    rclpy.spin(node)
    rclpy.shutdown()


if __name__ == '__main__':
    main()
